import { initReactI18next } from 'react-i18next';
import Backend from 'i18next-http-backend';
import i18n from 'i18next';

// Define a type for the callback function
type InitCompleteCallback = () => void;

// Function to initialize i18n with an optional callback
const initializeI18n = (onInitComplete?: InitCompleteCallback): void => {
  i18n
    .use(Backend)
    .use(initReactI18next)
    .init({
      lng: sessionStorage.getItem('rsdk_locale')?.substring(0, 2) || 'en',
      backend: {
        loadPath: 'assets/i18n/{{lng}}.json',
      },
      fallbackLng: 'en',
      debug: false,
      returnNull: false,
      react: {
        useSuspense: false,
      },
    })
    .finally(() => {
      if (onInitComplete) {
        onInitComplete();  // Execute the callback if provided
      }
    });
};

export default initializeI18n;


// AppSelector.tsx
import React, { useEffect, FC } from 'react';
import { Switch, Route, Redirect, RouteComponentProps } from 'react-router-dom';
import Registration from '../Registration/index';
import CookiePage from '../Registration/cookiePage/index';
import Accessibility from '../Registration/AccessibilityPage';
import ProtectedRoute from '../../components/HOC/ProtectedRoute';
import Cessation from '../Cessation';
import AppWrapper from '../../components/AppComponents/AppWrapper';
import initializeI18n from './path/to/i18nConfig';
import setPageTitle from '../../components/helpers/setPageTitleHelpers';

// Define the functional component with FC type
const AppSelector: FC = () => {
  useEffect(() => {
    // Initialize i18n and call setPageTitle after initialization
    initializeI18n(setPageTitle);
  }, []);

  // Render cookie page with AppWrapper
  const renderCookiePage = (props: RouteComponentProps) => (
    <AppWrapper {...props}>
      <CookiePage />
    </AppWrapper>
  );

  // Render accessibility page with AppWrapper
  const renderAccessibilityPage = (props: RouteComponentProps) => (
    <AppWrapper {...props}>
      <Accessibility />
    </AppWrapper>
  );

  return (
    <Switch>
      <Route exact path="/" render={() => <Redirect to="/registration" />} />
      {/* Public Routes */}
      <Route exact path="/:baseurl/cookies" render={renderCookiePage} />
      <Route exact path="/:baseurl/accessibility" render={renderAccessibilityPage} />
      {/* Private Routes */}
      <ProtectedRoute exact path="/registration" component={Registration} />
      <ProtectedRoute exact path="/cessation" component={Cessation} />
    </Switch>
  );
};

export default React.memo(AppSelector);

